// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quintilesims/layer0/cli/client (interfaces: Client)

// Package mock_client is a generated GoMock package.
package mock_client

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/quintilesims/layer0/common/models"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateDeploy mocks base method.
func (m *MockClient) CreateDeploy(arg0 string, arg1 []byte) (*models.Deploy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeploy", arg0, arg1)
	ret0, _ := ret[0].(*models.Deploy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeploy indicates an expected call of CreateDeploy.
func (mr *MockClientMockRecorder) CreateDeploy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploy", reflect.TypeOf((*MockClient)(nil).CreateDeploy), arg0, arg1)
}

// CreateEnvironment mocks base method.
func (m *MockClient) CreateEnvironment(arg0, arg1 string, arg2, arg3, arg4 int, arg5 []byte, arg6, arg7 string) (*models.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironment", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(*models.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironment indicates an expected call of CreateEnvironment.
func (mr *MockClientMockRecorder) CreateEnvironment(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockClient)(nil).CreateEnvironment), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// CreateLink mocks base method.
func (m *MockClient) CreateLink(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLink", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLink indicates an expected call of CreateLink.
func (mr *MockClientMockRecorder) CreateLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLink", reflect.TypeOf((*MockClient)(nil).CreateLink), arg0, arg1)
}

// CreateLoadBalancer mocks base method.
func (m *MockClient) CreateLoadBalancer(arg0, arg1 string, arg2 models.HealthCheck, arg3 []models.Port, arg4 bool, arg5 int, arg6 bool) (*models.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoadBalancer", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(*models.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoadBalancer indicates an expected call of CreateLoadBalancer.
func (mr *MockClientMockRecorder) CreateLoadBalancer(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancer", reflect.TypeOf((*MockClient)(nil).CreateLoadBalancer), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// CreateService mocks base method.
func (m *MockClient) CreateService(arg0, arg1, arg2, arg3 string) (*models.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService.
func (mr *MockClientMockRecorder) CreateService(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockClient)(nil).CreateService), arg0, arg1, arg2, arg3)
}

// CreateTask mocks base method.
func (m *MockClient) CreateTask(arg0, arg1, arg2 string, arg3 []models.ContainerOverride) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockClientMockRecorder) CreateTask(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockClient)(nil).CreateTask), arg0, arg1, arg2, arg3)
}

// Delete mocks base method.
func (m *MockClient) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClientMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClient)(nil).Delete), arg0)
}

// DeleteDeploy mocks base method.
func (m *MockClient) DeleteDeploy(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDeploy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeploy indicates an expected call of DeleteDeploy.
func (mr *MockClientMockRecorder) DeleteDeploy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploy", reflect.TypeOf((*MockClient)(nil).DeleteDeploy), arg0)
}

// DeleteEnvironment mocks base method.
func (m *MockClient) DeleteEnvironment(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment.
func (mr *MockClientMockRecorder) DeleteEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockClient)(nil).DeleteEnvironment), arg0)
}

// DeleteLink mocks base method.
func (m *MockClient) DeleteLink(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLink", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLink indicates an expected call of DeleteLink.
func (mr *MockClientMockRecorder) DeleteLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLink", reflect.TypeOf((*MockClient)(nil).DeleteLink), arg0, arg1)
}

// DeleteLoadBalancer mocks base method.
func (m *MockClient) DeleteLoadBalancer(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancer", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLoadBalancer indicates an expected call of DeleteLoadBalancer.
func (mr *MockClientMockRecorder) DeleteLoadBalancer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancer", reflect.TypeOf((*MockClient)(nil).DeleteLoadBalancer), arg0)
}

// DeleteService mocks base method.
func (m *MockClient) DeleteService(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockClientMockRecorder) DeleteService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockClient)(nil).DeleteService), arg0)
}

// DeleteTask mocks base method.
func (m *MockClient) DeleteTask(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockClientMockRecorder) DeleteTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockClient)(nil).DeleteTask), arg0)
}

// GetConfig mocks base method.
func (m *MockClient) GetConfig() (*models.APIConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(*models.APIConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockClientMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockClient)(nil).GetConfig))
}

// GetDeploy mocks base method.
func (m *MockClient) GetDeploy(arg0 string) (*models.Deploy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeploy", arg0)
	ret0, _ := ret[0].(*models.Deploy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploy indicates an expected call of GetDeploy.
func (mr *MockClientMockRecorder) GetDeploy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploy", reflect.TypeOf((*MockClient)(nil).GetDeploy), arg0)
}

// GetEnvironment mocks base method.
func (m *MockClient) GetEnvironment(arg0 string) (*models.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", arg0)
	ret0, _ := ret[0].(*models.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment.
func (mr *MockClientMockRecorder) GetEnvironment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockClient)(nil).GetEnvironment), arg0)
}

// GetJob mocks base method.
func (m *MockClient) GetJob(arg0 string) (*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", arg0)
	ret0, _ := ret[0].(*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockClientMockRecorder) GetJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockClient)(nil).GetJob), arg0)
}

// GetLoadBalancer mocks base method.
func (m *MockClient) GetLoadBalancer(arg0 string) (*models.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancer", arg0)
	ret0, _ := ret[0].(*models.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancer indicates an expected call of GetLoadBalancer.
func (mr *MockClientMockRecorder) GetLoadBalancer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancer", reflect.TypeOf((*MockClient)(nil).GetLoadBalancer), arg0)
}

// GetService mocks base method.
func (m *MockClient) GetService(arg0 string) (*models.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", arg0)
	ret0, _ := ret[0].(*models.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService.
func (mr *MockClientMockRecorder) GetService(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockClient)(nil).GetService), arg0)
}

// GetServiceLogs mocks base method.
func (m *MockClient) GetServiceLogs(arg0, arg1, arg2 string, arg3 int) ([]*models.LogFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceLogs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*models.LogFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceLogs indicates an expected call of GetServiceLogs.
func (mr *MockClientMockRecorder) GetServiceLogs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceLogs", reflect.TypeOf((*MockClient)(nil).GetServiceLogs), arg0, arg1, arg2, arg3)
}

// GetTask mocks base method.
func (m *MockClient) GetTask(arg0 string) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", arg0)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockClientMockRecorder) GetTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockClient)(nil).GetTask), arg0)
}

// GetTaskLogs mocks base method.
func (m *MockClient) GetTaskLogs(arg0, arg1, arg2 string, arg3 int) ([]*models.LogFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskLogs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*models.LogFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskLogs indicates an expected call of GetTaskLogs.
func (mr *MockClientMockRecorder) GetTaskLogs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskLogs", reflect.TypeOf((*MockClient)(nil).GetTaskLogs), arg0, arg1, arg2, arg3)
}

// GetVersion mocks base method.
func (m *MockClient) GetVersion() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockClientMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockClient)(nil).GetVersion))
}

// ListDeploys mocks base method.
func (m *MockClient) ListDeploys() ([]*models.DeploySummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploys")
	ret0, _ := ret[0].([]*models.DeploySummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploys indicates an expected call of ListDeploys.
func (mr *MockClientMockRecorder) ListDeploys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploys", reflect.TypeOf((*MockClient)(nil).ListDeploys))
}

// ListEnvironments mocks base method.
func (m *MockClient) ListEnvironments() ([]*models.EnvironmentSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments")
	ret0, _ := ret[0].([]*models.EnvironmentSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments.
func (mr *MockClientMockRecorder) ListEnvironments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockClient)(nil).ListEnvironments))
}

// ListJobs mocks base method.
func (m *MockClient) ListJobs() ([]*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs")
	ret0, _ := ret[0].([]*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockClientMockRecorder) ListJobs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockClient)(nil).ListJobs))
}

// ListLoadBalancers mocks base method.
func (m *MockClient) ListLoadBalancers() ([]*models.LoadBalancerSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoadBalancers")
	ret0, _ := ret[0].([]*models.LoadBalancerSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoadBalancers indicates an expected call of ListLoadBalancers.
func (mr *MockClientMockRecorder) ListLoadBalancers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoadBalancers", reflect.TypeOf((*MockClient)(nil).ListLoadBalancers))
}

// ListServices mocks base method.
func (m *MockClient) ListServices() ([]*models.ServiceSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices")
	ret0, _ := ret[0].([]*models.ServiceSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockClientMockRecorder) ListServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockClient)(nil).ListServices))
}

// ListTasks mocks base method.
func (m *MockClient) ListTasks() ([]*models.TaskSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTasks")
	ret0, _ := ret[0].([]*models.TaskSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasks indicates an expected call of ListTasks.
func (mr *MockClientMockRecorder) ListTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*MockClient)(nil).ListTasks))
}

// RunScaler mocks base method.
func (m *MockClient) RunScaler(arg0 string) (*models.ScalerRunInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunScaler", arg0)
	ret0, _ := ret[0].(*models.ScalerRunInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunScaler indicates an expected call of RunScaler.
func (mr *MockClientMockRecorder) RunScaler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunScaler", reflect.TypeOf((*MockClient)(nil).RunScaler), arg0)
}

// ScaleService mocks base method.
func (m *MockClient) ScaleService(arg0 string, arg1 int) (*models.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScaleService", arg0, arg1)
	ret0, _ := ret[0].(*models.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScaleService indicates an expected call of ScaleService.
func (mr *MockClientMockRecorder) ScaleService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleService", reflect.TypeOf((*MockClient)(nil).ScaleService), arg0, arg1)
}

// SelectByQuery mocks base method.
func (m *MockClient) SelectByQuery(arg0 map[string]string) ([]*models.EntityWithTags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByQuery", arg0)
	ret0, _ := ret[0].([]*models.EntityWithTags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByQuery indicates an expected call of SelectByQuery.
func (mr *MockClientMockRecorder) SelectByQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByQuery", reflect.TypeOf((*MockClient)(nil).SelectByQuery), arg0)
}

// UpdateEnvironment mocks base method.
func (m *MockClient) UpdateEnvironment(arg0 string, arg1 int) (*models.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironment", arg0, arg1)
	ret0, _ := ret[0].(*models.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironment indicates an expected call of UpdateEnvironment.
func (mr *MockClientMockRecorder) UpdateEnvironment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironment", reflect.TypeOf((*MockClient)(nil).UpdateEnvironment), arg0, arg1)
}

// UpdateLoadBalancerCrossZone mocks base method.
func (m *MockClient) UpdateLoadBalancerCrossZone(arg0 string, arg1 bool) (*models.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoadBalancerCrossZone", arg0, arg1)
	ret0, _ := ret[0].(*models.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoadBalancerCrossZone indicates an expected call of UpdateLoadBalancerCrossZone.
func (mr *MockClientMockRecorder) UpdateLoadBalancerCrossZone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancerCrossZone", reflect.TypeOf((*MockClient)(nil).UpdateLoadBalancerCrossZone), arg0, arg1)
}

// UpdateLoadBalancerHealthCheck mocks base method.
func (m *MockClient) UpdateLoadBalancerHealthCheck(arg0 string, arg1 models.HealthCheck) (*models.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoadBalancerHealthCheck", arg0, arg1)
	ret0, _ := ret[0].(*models.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoadBalancerHealthCheck indicates an expected call of UpdateLoadBalancerHealthCheck.
func (mr *MockClientMockRecorder) UpdateLoadBalancerHealthCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancerHealthCheck", reflect.TypeOf((*MockClient)(nil).UpdateLoadBalancerHealthCheck), arg0, arg1)
}

// UpdateLoadBalancerIdleTimeout mocks base method.
func (m *MockClient) UpdateLoadBalancerIdleTimeout(arg0 string, arg1 int) (*models.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoadBalancerIdleTimeout", arg0, arg1)
	ret0, _ := ret[0].(*models.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoadBalancerIdleTimeout indicates an expected call of UpdateLoadBalancerIdleTimeout.
func (mr *MockClientMockRecorder) UpdateLoadBalancerIdleTimeout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancerIdleTimeout", reflect.TypeOf((*MockClient)(nil).UpdateLoadBalancerIdleTimeout), arg0, arg1)
}

// UpdateLoadBalancerPorts mocks base method.
func (m *MockClient) UpdateLoadBalancerPorts(arg0 string, arg1 []models.Port) (*models.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoadBalancerPorts", arg0, arg1)
	ret0, _ := ret[0].(*models.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoadBalancerPorts indicates an expected call of UpdateLoadBalancerPorts.
func (mr *MockClientMockRecorder) UpdateLoadBalancerPorts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancerPorts", reflect.TypeOf((*MockClient)(nil).UpdateLoadBalancerPorts), arg0, arg1)
}

// UpdateSQL mocks base method.
func (m *MockClient) UpdateSQL() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSQL")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSQL indicates an expected call of UpdateSQL.
func (mr *MockClientMockRecorder) UpdateSQL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSQL", reflect.TypeOf((*MockClient)(nil).UpdateSQL))
}

// UpdateService mocks base method.
func (m *MockClient) UpdateService(arg0, arg1 string) (*models.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", arg0, arg1)
	ret0, _ := ret[0].(*models.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockClientMockRecorder) UpdateService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockClient)(nil).UpdateService), arg0, arg1)
}

// WaitForDeployment mocks base method.
func (m *MockClient) WaitForDeployment(arg0 string, arg1 time.Duration) (*models.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForDeployment", arg0, arg1)
	ret0, _ := ret[0].(*models.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForDeployment indicates an expected call of WaitForDeployment.
func (mr *MockClientMockRecorder) WaitForDeployment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForDeployment", reflect.TypeOf((*MockClient)(nil).WaitForDeployment), arg0, arg1)
}

// WaitForJob mocks base method.
func (m *MockClient) WaitForJob(arg0 string, arg1 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForJob", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForJob indicates an expected call of WaitForJob.
func (mr *MockClientMockRecorder) WaitForJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForJob", reflect.TypeOf((*MockClient)(nil).WaitForJob), arg0, arg1)
}
