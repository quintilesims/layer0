// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quintilesims/layer0/common/aws/cloudwatchlogs (interfaces: Provider)

// Package mock_cloudwatchlogs is a generated GoMock package.
package mock_cloudwatchlogs

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cloudwatchlogs "github.com/quintilesims/layer0/common/aws/cloudwatchlogs"
)

// MockProvider is a mock of Provider interface
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// CreateLogGroup mocks base method
func (m *MockProvider) CreateLogGroup(arg0 string) error {
	ret := m.ctrl.Call(m, "CreateLogGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLogGroup indicates an expected call of CreateLogGroup
func (mr *MockProviderMockRecorder) CreateLogGroup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLogGroup", reflect.TypeOf((*MockProvider)(nil).CreateLogGroup), arg0)
}

// DeleteLogGroup mocks base method
func (m *MockProvider) DeleteLogGroup(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteLogGroup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogGroup indicates an expected call of DeleteLogGroup
func (mr *MockProviderMockRecorder) DeleteLogGroup(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogGroup", reflect.TypeOf((*MockProvider)(nil).DeleteLogGroup), arg0)
}

// DescribeLogGroups mocks base method
func (m *MockProvider) DescribeLogGroups(arg0 string, arg1 *string) ([]*cloudwatchlogs.LogGroup, error) {
	ret := m.ctrl.Call(m, "DescribeLogGroups", arg0, arg1)
	ret0, _ := ret[0].([]*cloudwatchlogs.LogGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLogGroups indicates an expected call of DescribeLogGroups
func (mr *MockProviderMockRecorder) DescribeLogGroups(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLogGroups", reflect.TypeOf((*MockProvider)(nil).DescribeLogGroups), arg0, arg1)
}

// DescribeLogStreams mocks base method
func (m *MockProvider) DescribeLogStreams(arg0, arg1 string) ([]*cloudwatchlogs.LogStream, error) {
	ret := m.ctrl.Call(m, "DescribeLogStreams", arg0, arg1)
	ret0, _ := ret[0].([]*cloudwatchlogs.LogStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLogStreams indicates an expected call of DescribeLogStreams
func (mr *MockProviderMockRecorder) DescribeLogStreams(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLogStreams", reflect.TypeOf((*MockProvider)(nil).DescribeLogStreams), arg0, arg1)
}

// FilterLogEvents mocks base method
func (m *MockProvider) FilterLogEvents(arg0, arg1, arg2 *string, arg3 []*string, arg4, arg5 *int64, arg6 *bool) ([]*cloudwatchlogs.FilteredLogEvent, []*cloudwatchlogs.SearchedLogStream, error) {
	ret := m.ctrl.Call(m, "FilterLogEvents", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].([]*cloudwatchlogs.FilteredLogEvent)
	ret1, _ := ret[1].([]*cloudwatchlogs.SearchedLogStream)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FilterLogEvents indicates an expected call of FilterLogEvents
func (mr *MockProviderMockRecorder) FilterLogEvents(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterLogEvents", reflect.TypeOf((*MockProvider)(nil).FilterLogEvents), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// GetLogEvents mocks base method
func (m *MockProvider) GetLogEvents(arg0, arg1, arg2, arg3 string, arg4 int64) ([]*cloudwatchlogs.OutputLogEvent, error) {
	ret := m.ctrl.Call(m, "GetLogEvents", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*cloudwatchlogs.OutputLogEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogEvents indicates an expected call of GetLogEvents
func (mr *MockProviderMockRecorder) GetLogEvents(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogEvents", reflect.TypeOf((*MockProvider)(nil).GetLogEvents), arg0, arg1, arg2, arg3, arg4)
}
