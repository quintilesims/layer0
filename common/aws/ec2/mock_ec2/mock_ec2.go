// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/quintilesims/layer0/common/aws/ec2 (interfaces: Provider)

package mock_ec2

import (
	gomock "github.com/golang/mock/gomock"
	ec2 "github.com/quintilesims/layer0/common/aws/ec2"
)

// Mock of Provider interface
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *_MockProviderRecorder
}

// Recorder for MockProvider (not exported)
type _MockProviderRecorder struct {
	mock *MockProvider
}

func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &_MockProviderRecorder{mock}
	return mock
}

func (_m *MockProvider) EXPECT() *_MockProviderRecorder {
	return _m.recorder
}

func (_m *MockProvider) AuthorizeSecurityGroupIngress(_param0 []*ec2.SecurityGroupIngress) error {
	ret := _m.ctrl.Call(_m, "AuthorizeSecurityGroupIngress", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockProviderRecorder) AuthorizeSecurityGroupIngress(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AuthorizeSecurityGroupIngress", arg0)
}

func (_m *MockProvider) AuthorizeSecurityGroupIngressFromGroup(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "AuthorizeSecurityGroupIngressFromGroup", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockProviderRecorder) AuthorizeSecurityGroupIngressFromGroup(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AuthorizeSecurityGroupIngressFromGroup", arg0, arg1)
}

func (_m *MockProvider) CreateSecurityGroup(_param0 string, _param1 string, _param2 string) (*string, error) {
	ret := _m.ctrl.Call(_m, "CreateSecurityGroup", _param0, _param1, _param2)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProviderRecorder) CreateSecurityGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateSecurityGroup", arg0, arg1, arg2)
}

func (_m *MockProvider) DeleteSecurityGroup(_param0 *ec2.SecurityGroup) error {
	ret := _m.ctrl.Call(_m, "DeleteSecurityGroup", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockProviderRecorder) DeleteSecurityGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSecurityGroup", arg0)
}

func (_m *MockProvider) DescribeInstance(_param0 string) (*ec2.Instance, error) {
	ret := _m.ctrl.Call(_m, "DescribeInstance", _param0)
	ret0, _ := ret[0].(*ec2.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProviderRecorder) DescribeInstance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstance", arg0)
}

func (_m *MockProvider) DescribeSecurityGroup(_param0 string) (*ec2.SecurityGroup, error) {
	ret := _m.ctrl.Call(_m, "DescribeSecurityGroup", _param0)
	ret0, _ := ret[0].(*ec2.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProviderRecorder) DescribeSecurityGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeSecurityGroup", arg0)
}

func (_m *MockProvider) DescribeSubnet(_param0 string) (*ec2.Subnet, error) {
	ret := _m.ctrl.Call(_m, "DescribeSubnet", _param0)
	ret0, _ := ret[0].(*ec2.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProviderRecorder) DescribeSubnet(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeSubnet", arg0)
}

func (_m *MockProvider) DescribeVPC(_param0 string) (*ec2.VPC, error) {
	ret := _m.ctrl.Call(_m, "DescribeVPC", _param0)
	ret0, _ := ret[0].(*ec2.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProviderRecorder) DescribeVPC(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeVPC", arg0)
}

func (_m *MockProvider) DescribeVPCByName(_param0 string) (*ec2.VPC, error) {
	ret := _m.ctrl.Call(_m, "DescribeVPCByName", _param0)
	ret0, _ := ret[0].(*ec2.VPC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProviderRecorder) DescribeVPCByName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeVPCByName", arg0)
}

func (_m *MockProvider) DescribeVPCGateways(_param0 string) ([]*ec2.InternetGateway, error) {
	ret := _m.ctrl.Call(_m, "DescribeVPCGateways", _param0)
	ret0, _ := ret[0].([]*ec2.InternetGateway)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProviderRecorder) DescribeVPCGateways(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeVPCGateways", arg0)
}

func (_m *MockProvider) DescribeVPCRoutes(_param0 string) ([]*ec2.RouteTable, error) {
	ret := _m.ctrl.Call(_m, "DescribeVPCRoutes", _param0)
	ret0, _ := ret[0].([]*ec2.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProviderRecorder) DescribeVPCRoutes(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeVPCRoutes", arg0)
}

func (_m *MockProvider) DescribeVPCSubnets(_param0 string) ([]*ec2.Subnet, error) {
	ret := _m.ctrl.Call(_m, "DescribeVPCSubnets", _param0)
	ret0, _ := ret[0].([]*ec2.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProviderRecorder) DescribeVPCSubnets(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeVPCSubnets", arg0)
}

func (_m *MockProvider) RevokeSecurityGroupIngress(_param0 []*ec2.SecurityGroupIngress) error {
	ret := _m.ctrl.Call(_m, "RevokeSecurityGroupIngress", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockProviderRecorder) RevokeSecurityGroupIngress(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RevokeSecurityGroupIngress", arg0)
}

func (_m *MockProvider) RevokeSecurityGroupIngressHelper(_param0 string, _param1 ec2.IpPermission) error {
	ret := _m.ctrl.Call(_m, "RevokeSecurityGroupIngressHelper", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockProviderRecorder) RevokeSecurityGroupIngressHelper(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RevokeSecurityGroupIngressHelper", arg0, arg1)
}
