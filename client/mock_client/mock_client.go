// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quintilesims/layer0/client (interfaces: Client)

// Package mock_client is a generated GoMock package.
package mock_client

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/quintilesims/layer0/common/models"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateEnvironment mocks base method
func (m *MockClient) CreateEnvironment(arg0 models.CreateEnvironmentRequest) (string, error) {
	ret := m.ctrl.Call(m, "CreateEnvironment", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironment indicates an expected call of CreateEnvironment
func (mr *MockClientMockRecorder) CreateEnvironment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockClient)(nil).CreateEnvironment), arg0)
}

// CreateService mocks base method
func (m *MockClient) CreateService(arg0 models.CreateServiceRequest) (string, error) {
	ret := m.ctrl.Call(m, "CreateService", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService
func (mr *MockClientMockRecorder) CreateService(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockClient)(nil).CreateService), arg0)
}

// DeleteEnvironment mocks base method
func (m *MockClient) DeleteEnvironment(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "DeleteEnvironment", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment
func (mr *MockClientMockRecorder) DeleteEnvironment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockClient)(nil).DeleteEnvironment), arg0)
}

// DeleteJob mocks base method
func (m *MockClient) DeleteJob(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteJob", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJob indicates an expected call of DeleteJob
func (mr *MockClientMockRecorder) DeleteJob(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockClient)(nil).DeleteJob), arg0)
}

// DeleteService mocks base method
func (m *MockClient) DeleteService(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "DeleteService", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteService indicates an expected call of DeleteService
func (mr *MockClientMockRecorder) DeleteService(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockClient)(nil).DeleteService), arg0)
}

// ListEnvironments mocks base method
func (m *MockClient) ListEnvironments() ([]*models.EnvironmentSummary, error) {
	ret := m.ctrl.Call(m, "ListEnvironments")
	ret0, _ := ret[0].([]*models.EnvironmentSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments
func (mr *MockClientMockRecorder) ListEnvironments() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockClient)(nil).ListEnvironments))
}

// ListJobs mocks base method
func (m *MockClient) ListJobs() ([]*models.Job, error) {
	ret := m.ctrl.Call(m, "ListJobs")
	ret0, _ := ret[0].([]*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs
func (mr *MockClientMockRecorder) ListJobs() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockClient)(nil).ListJobs))
}

// ListServices mocks base method
func (m *MockClient) ListServices() ([]*models.ServiceSummary, error) {
	ret := m.ctrl.Call(m, "ListServices")
	ret0, _ := ret[0].([]*models.ServiceSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices
func (mr *MockClientMockRecorder) ListServices() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockClient)(nil).ListServices))
}

// ReadEnvironment mocks base method
func (m *MockClient) ReadEnvironment(arg0 string) (*models.Environment, error) {
	ret := m.ctrl.Call(m, "ReadEnvironment", arg0)
	ret0, _ := ret[0].(*models.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEnvironment indicates an expected call of ReadEnvironment
func (mr *MockClientMockRecorder) ReadEnvironment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEnvironment", reflect.TypeOf((*MockClient)(nil).ReadEnvironment), arg0)
}

// ReadJob mocks base method
func (m *MockClient) ReadJob(arg0 string) (*models.Job, error) {
	ret := m.ctrl.Call(m, "ReadJob", arg0)
	ret0, _ := ret[0].(*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadJob indicates an expected call of ReadJob
func (mr *MockClientMockRecorder) ReadJob(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadJob", reflect.TypeOf((*MockClient)(nil).ReadJob), arg0)
}

// ReadService mocks base method
func (m *MockClient) ReadService(arg0 string) (*models.Service, error) {
	ret := m.ctrl.Call(m, "ReadService", arg0)
	ret0, _ := ret[0].(*models.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadService indicates an expected call of ReadService
func (mr *MockClientMockRecorder) ReadService(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadService", reflect.TypeOf((*MockClient)(nil).ReadService), arg0)
}

// UpdateEnvironment mocks base method
func (m *MockClient) UpdateEnvironment(arg0 models.UpdateEnvironmentRequest) (string, error) {
	ret := m.ctrl.Call(m, "UpdateEnvironment", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironment indicates an expected call of UpdateEnvironment
func (mr *MockClientMockRecorder) UpdateEnvironment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironment", reflect.TypeOf((*MockClient)(nil).UpdateEnvironment), arg0)
}

// UpdateService mocks base method
func (m *MockClient) UpdateService(arg0 models.UpdateServiceRequest) (string, error) {
	ret := m.ctrl.Call(m, "UpdateService", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateService indicates an expected call of UpdateService
func (mr *MockClientMockRecorder) UpdateService(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockClient)(nil).UpdateService), arg0)
}
