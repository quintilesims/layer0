// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quintilesims/layer0/client (interfaces: Client)

// Package mock_client is a generated GoMock package.
package mock_client

import (
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/quintilesims/layer0/common/models"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateDeploy mocks base method
func (m *MockClient) CreateDeploy(arg0 models.CreateDeployRequest) (string, error) {
	ret := m.ctrl.Call(m, "CreateDeploy", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeploy indicates an expected call of CreateDeploy
func (mr *MockClientMockRecorder) CreateDeploy(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploy", reflect.TypeOf((*MockClient)(nil).CreateDeploy), arg0)
}

// CreateEnvironment mocks base method
func (m *MockClient) CreateEnvironment(arg0 models.CreateEnvironmentRequest) (string, error) {
	ret := m.ctrl.Call(m, "CreateEnvironment", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironment indicates an expected call of CreateEnvironment
func (mr *MockClientMockRecorder) CreateEnvironment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockClient)(nil).CreateEnvironment), arg0)
}

// CreateLoadBalancer mocks base method
func (m *MockClient) CreateLoadBalancer(arg0 models.CreateLoadBalancerRequest) (string, error) {
	ret := m.ctrl.Call(m, "CreateLoadBalancer", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoadBalancer indicates an expected call of CreateLoadBalancer
func (mr *MockClientMockRecorder) CreateLoadBalancer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancer", reflect.TypeOf((*MockClient)(nil).CreateLoadBalancer), arg0)
}

// CreateService mocks base method
func (m *MockClient) CreateService(arg0 models.CreateServiceRequest) (string, error) {
	ret := m.ctrl.Call(m, "CreateService", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService
func (mr *MockClientMockRecorder) CreateService(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockClient)(nil).CreateService), arg0)
}

// CreateTask mocks base method
func (m *MockClient) CreateTask(arg0 models.CreateTaskRequest) (string, error) {
	ret := m.ctrl.Call(m, "CreateTask", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask
func (mr *MockClientMockRecorder) CreateTask(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockClient)(nil).CreateTask), arg0)
}

// DeleteDeploy mocks base method
func (m *MockClient) DeleteDeploy(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteDeploy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeploy indicates an expected call of DeleteDeploy
func (mr *MockClientMockRecorder) DeleteDeploy(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploy", reflect.TypeOf((*MockClient)(nil).DeleteDeploy), arg0)
}

// DeleteEnvironment mocks base method
func (m *MockClient) DeleteEnvironment(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteEnvironment", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment
func (mr *MockClientMockRecorder) DeleteEnvironment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockClient)(nil).DeleteEnvironment), arg0)
}

// DeleteLoadBalancer mocks base method
func (m *MockClient) DeleteLoadBalancer(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteLoadBalancer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadBalancer indicates an expected call of DeleteLoadBalancer
func (mr *MockClientMockRecorder) DeleteLoadBalancer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancer", reflect.TypeOf((*MockClient)(nil).DeleteLoadBalancer), arg0)
}

// DeleteService mocks base method
func (m *MockClient) DeleteService(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteService", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService
func (mr *MockClientMockRecorder) DeleteService(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockClient)(nil).DeleteService), arg0)
}

// DeleteTask mocks base method
func (m *MockClient) DeleteTask(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteTask", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask
func (mr *MockClientMockRecorder) DeleteTask(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockClient)(nil).DeleteTask), arg0)
}

// ListDeploys mocks base method
func (m *MockClient) ListDeploys() ([]models.DeploySummary, error) {
	ret := m.ctrl.Call(m, "ListDeploys")
	ret0, _ := ret[0].([]models.DeploySummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploys indicates an expected call of ListDeploys
func (mr *MockClientMockRecorder) ListDeploys() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploys", reflect.TypeOf((*MockClient)(nil).ListDeploys))
}

// ListEnvironments mocks base method
func (m *MockClient) ListEnvironments() ([]models.EnvironmentSummary, error) {
	ret := m.ctrl.Call(m, "ListEnvironments")
	ret0, _ := ret[0].([]models.EnvironmentSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments
func (mr *MockClientMockRecorder) ListEnvironments() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockClient)(nil).ListEnvironments))
}

// ListLoadBalancers mocks base method
func (m *MockClient) ListLoadBalancers() ([]models.LoadBalancerSummary, error) {
	ret := m.ctrl.Call(m, "ListLoadBalancers")
	ret0, _ := ret[0].([]models.LoadBalancerSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoadBalancers indicates an expected call of ListLoadBalancers
func (mr *MockClientMockRecorder) ListLoadBalancers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoadBalancers", reflect.TypeOf((*MockClient)(nil).ListLoadBalancers))
}

// ListServices mocks base method
func (m *MockClient) ListServices() ([]models.ServiceSummary, error) {
	ret := m.ctrl.Call(m, "ListServices")
	ret0, _ := ret[0].([]models.ServiceSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices
func (mr *MockClientMockRecorder) ListServices() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockClient)(nil).ListServices))
}

// ListTags mocks base method
func (m *MockClient) ListTags(arg0 url.Values) (models.Tags, error) {
	ret := m.ctrl.Call(m, "ListTags", arg0)
	ret0, _ := ret[0].(models.Tags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags
func (mr *MockClientMockRecorder) ListTags(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockClient)(nil).ListTags), arg0)
}

// ListTasks mocks base method
func (m *MockClient) ListTasks() ([]models.TaskSummary, error) {
	ret := m.ctrl.Call(m, "ListTasks")
	ret0, _ := ret[0].([]models.TaskSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasks indicates an expected call of ListTasks
func (mr *MockClientMockRecorder) ListTasks() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*MockClient)(nil).ListTasks))
}

// ReadConfig mocks base method
func (m *MockClient) ReadConfig() (*models.APIConfig, error) {
	ret := m.ctrl.Call(m, "ReadConfig")
	ret0, _ := ret[0].(*models.APIConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadConfig indicates an expected call of ReadConfig
func (mr *MockClientMockRecorder) ReadConfig() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadConfig", reflect.TypeOf((*MockClient)(nil).ReadConfig))
}

// ReadDeploy mocks base method
func (m *MockClient) ReadDeploy(arg0 string) (*models.Deploy, error) {
	ret := m.ctrl.Call(m, "ReadDeploy", arg0)
	ret0, _ := ret[0].(*models.Deploy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDeploy indicates an expected call of ReadDeploy
func (mr *MockClientMockRecorder) ReadDeploy(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDeploy", reflect.TypeOf((*MockClient)(nil).ReadDeploy), arg0)
}

// ReadEnvironment mocks base method
func (m *MockClient) ReadEnvironment(arg0 string) (*models.Environment, error) {
	ret := m.ctrl.Call(m, "ReadEnvironment", arg0)
	ret0, _ := ret[0].(*models.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEnvironment indicates an expected call of ReadEnvironment
func (mr *MockClientMockRecorder) ReadEnvironment(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEnvironment", reflect.TypeOf((*MockClient)(nil).ReadEnvironment), arg0)
}

// ReadLoadBalancer mocks base method
func (m *MockClient) ReadLoadBalancer(arg0 string) (*models.LoadBalancer, error) {
	ret := m.ctrl.Call(m, "ReadLoadBalancer", arg0)
	ret0, _ := ret[0].(*models.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLoadBalancer indicates an expected call of ReadLoadBalancer
func (mr *MockClientMockRecorder) ReadLoadBalancer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLoadBalancer", reflect.TypeOf((*MockClient)(nil).ReadLoadBalancer), arg0)
}

// ReadService mocks base method
func (m *MockClient) ReadService(arg0 string) (*models.Service, error) {
	ret := m.ctrl.Call(m, "ReadService", arg0)
	ret0, _ := ret[0].(*models.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadService indicates an expected call of ReadService
func (mr *MockClientMockRecorder) ReadService(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadService", reflect.TypeOf((*MockClient)(nil).ReadService), arg0)
}

// ReadServiceLogs mocks base method
func (m *MockClient) ReadServiceLogs(arg0 string, arg1 url.Values) ([]models.LogFile, error) {
	ret := m.ctrl.Call(m, "ReadServiceLogs", arg0, arg1)
	ret0, _ := ret[0].([]models.LogFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadServiceLogs indicates an expected call of ReadServiceLogs
func (mr *MockClientMockRecorder) ReadServiceLogs(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadServiceLogs", reflect.TypeOf((*MockClient)(nil).ReadServiceLogs), arg0, arg1)
}

// ReadTask mocks base method
func (m *MockClient) ReadTask(arg0 string) (*models.Task, error) {
	ret := m.ctrl.Call(m, "ReadTask", arg0)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTask indicates an expected call of ReadTask
func (mr *MockClientMockRecorder) ReadTask(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTask", reflect.TypeOf((*MockClient)(nil).ReadTask), arg0)
}

// ReadTaskLogs mocks base method
func (m *MockClient) ReadTaskLogs(arg0 string, arg1 url.Values) ([]models.LogFile, error) {
	ret := m.ctrl.Call(m, "ReadTaskLogs", arg0, arg1)
	ret0, _ := ret[0].([]models.LogFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTaskLogs indicates an expected call of ReadTaskLogs
func (mr *MockClientMockRecorder) ReadTaskLogs(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTaskLogs", reflect.TypeOf((*MockClient)(nil).ReadTaskLogs), arg0, arg1)
}

// UpdateEnvironment mocks base method
func (m *MockClient) UpdateEnvironment(arg0 string, arg1 models.UpdateEnvironmentRequest) error {
	ret := m.ctrl.Call(m, "UpdateEnvironment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEnvironment indicates an expected call of UpdateEnvironment
func (mr *MockClientMockRecorder) UpdateEnvironment(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironment", reflect.TypeOf((*MockClient)(nil).UpdateEnvironment), arg0, arg1)
}

// UpdateLoadBalancer mocks base method
func (m *MockClient) UpdateLoadBalancer(arg0 string, arg1 models.UpdateLoadBalancerRequest) error {
	ret := m.ctrl.Call(m, "UpdateLoadBalancer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLoadBalancer indicates an expected call of UpdateLoadBalancer
func (mr *MockClientMockRecorder) UpdateLoadBalancer(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancer", reflect.TypeOf((*MockClient)(nil).UpdateLoadBalancer), arg0, arg1)
}

// UpdateService mocks base method
func (m *MockClient) UpdateService(arg0 string, arg1 models.UpdateServiceRequest) error {
	ret := m.ctrl.Call(m, "UpdateService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateService indicates an expected call of UpdateService
func (mr *MockClientMockRecorder) UpdateService(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockClient)(nil).UpdateService), arg0, arg1)
}
