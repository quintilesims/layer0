// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quintilesims/layer0/api/provider (interfaces: TaskProvider)

// Package mock_provider is a generated GoMock package.
package mock_provider

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/quintilesims/layer0/common/models"
)

// MockTaskProvider is a mock of TaskProvider interface
type MockTaskProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTaskProviderMockRecorder
}

// MockTaskProviderMockRecorder is the mock recorder for MockTaskProvider
type MockTaskProviderMockRecorder struct {
	mock *MockTaskProvider
}

// NewMockTaskProvider creates a new mock instance
func NewMockTaskProvider(ctrl *gomock.Controller) *MockTaskProvider {
	mock := &MockTaskProvider{ctrl: ctrl}
	mock.recorder = &MockTaskProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskProvider) EXPECT() *MockTaskProviderMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockTaskProvider) Create(arg0 models.CreateTaskRequest) (*models.Task, error) {
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockTaskProviderMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskProvider)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockTaskProvider) Delete(arg0 string) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockTaskProviderMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskProvider)(nil).Delete), arg0)
}

// List mocks base method
func (m *MockTaskProvider) List() ([]models.TaskSummary, error) {
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]models.TaskSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockTaskProviderMockRecorder) List() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTaskProvider)(nil).List))
}

// Read mocks base method
func (m *MockTaskProvider) Read(arg0 string) (*models.Task, error) {
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockTaskProviderMockRecorder) Read(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTaskProvider)(nil).Read), arg0)
}
