// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quintilesims/layer0/api/provider (interfaces: EnvironmentProvider)

// Package mock_provider is a generated GoMock package.
package mock_provider

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/quintilesims/layer0/common/models"
	reflect "reflect"
	time "time"
)

// MockEnvironmentProvider is a mock of EnvironmentProvider interface
type MockEnvironmentProvider struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentProviderMockRecorder
}

// MockEnvironmentProviderMockRecorder is the mock recorder for MockEnvironmentProvider
type MockEnvironmentProviderMockRecorder struct {
	mock *MockEnvironmentProvider
}

// NewMockEnvironmentProvider creates a new mock instance
func NewMockEnvironmentProvider(ctrl *gomock.Controller) *MockEnvironmentProvider {
	mock := &MockEnvironmentProvider{ctrl: ctrl}
	mock.recorder = &MockEnvironmentProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEnvironmentProvider) EXPECT() *MockEnvironmentProviderMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockEnvironmentProvider) Create(arg0 models.CreateEnvironmentRequest) (string, error) {
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockEnvironmentProviderMockRecorder) Create(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEnvironmentProvider)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockEnvironmentProvider) Delete(arg0 string) error {
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockEnvironmentProviderMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEnvironmentProvider)(nil).Delete), arg0)
}

// List mocks base method
func (m *MockEnvironmentProvider) List() ([]models.EnvironmentSummary, error) {
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]models.EnvironmentSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockEnvironmentProviderMockRecorder) List() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockEnvironmentProvider)(nil).List))
}

// Logs mocks base method
func (m *MockEnvironmentProvider) Logs(arg0 string, arg1 int, arg2, arg3 time.Time) ([]models.LogFile, error) {
	ret := m.ctrl.Call(m, "Logs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.LogFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logs indicates an expected call of Logs
func (mr *MockEnvironmentProviderMockRecorder) Logs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockEnvironmentProvider)(nil).Logs), arg0, arg1, arg2, arg3)
}

// Read mocks base method
func (m *MockEnvironmentProvider) Read(arg0 string) (*models.Environment, error) {
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(*models.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockEnvironmentProviderMockRecorder) Read(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockEnvironmentProvider)(nil).Read), arg0)
}

// Update mocks base method
func (m *MockEnvironmentProvider) Update(arg0 string, arg1 models.UpdateEnvironmentRequest) error {
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockEnvironmentProviderMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEnvironmentProvider)(nil).Update), arg0, arg1)
}
