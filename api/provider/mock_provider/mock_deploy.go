// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/quintilesims/layer0/api/provider (interfaces: DeployProvider)

package mock_provider

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/quintilesims/layer0/common/models"
)

// Mock of DeployProvider interface
type MockDeployProvider struct {
	ctrl     *gomock.Controller
	recorder *_MockDeployProviderRecorder
}

// Recorder for MockDeployProvider (not exported)
type _MockDeployProviderRecorder struct {
	mock *MockDeployProvider
}

func NewMockDeployProvider(ctrl *gomock.Controller) *MockDeployProvider {
	mock := &MockDeployProvider{ctrl: ctrl}
	mock.recorder = &_MockDeployProviderRecorder{mock}
	return mock
}

func (_m *MockDeployProvider) EXPECT() *_MockDeployProviderRecorder {
	return _m.recorder
}

func (_m *MockDeployProvider) Create(_param0 models.CreateDeployRequest) (*models.Deploy, error) {
	ret := _m.ctrl.Call(_m, "Create", _param0)
	ret0, _ := ret[0].(*models.Deploy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDeployProviderRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0)
}

func (_m *MockDeployProvider) Delete(_param0 string) error {
	ret := _m.ctrl.Call(_m, "Delete", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDeployProviderRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0)
}

func (_m *MockDeployProvider) List() ([]models.DeploySummary, error) {
	ret := _m.ctrl.Call(_m, "List")
	ret0, _ := ret[0].([]models.DeploySummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDeployProviderRecorder) List() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "List")
}

func (_m *MockDeployProvider) Read(_param0 string) (*models.Deploy, error) {
	ret := _m.ctrl.Call(_m, "Read", _param0)
	ret0, _ := ret[0].(*models.Deploy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDeployProviderRecorder) Read(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Read", arg0)
}
