// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/quintilesims/layer0/api/job (interfaces: Scheduler)

package mock_job

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/quintilesims/layer0/common/models"
)

// Mock of Scheduler interface
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *_MockSchedulerRecorder
}

// Recorder for MockScheduler (not exported)
type _MockSchedulerRecorder struct {
	mock *MockScheduler
}

func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &_MockSchedulerRecorder{mock}
	return mock
}

func (_m *MockScheduler) EXPECT() *_MockSchedulerRecorder {
	return _m.recorder
}

func (_m *MockScheduler) List() ([]*models.Job, error) {
	ret := _m.ctrl.Call(_m, "List")
	ret0, _ := ret[0].([]*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSchedulerRecorder) List() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "List")
}

func (_m *MockScheduler) Read(_param0 string) (*models.Job, error) {
	ret := _m.ctrl.Call(_m, "Read", _param0)
	ret0, _ := ret[0].(*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSchedulerRecorder) Read(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Read", arg0)
}

func (_m *MockScheduler) Schedule(_param0 models.ScheduleJobRequest) (string, error) {
	ret := _m.ctrl.Call(_m, "Schedule", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSchedulerRecorder) Schedule(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Schedule", arg0)
}

func (_m *MockScheduler) Unschedule(_param0 string) error {
	ret := _m.ctrl.Call(_m, "Unschedule", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSchedulerRecorder) Unschedule(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unschedule", arg0)
}
