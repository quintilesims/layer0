// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_backend is a generated GoMock package.
package mock_backend

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	id "github.com/quintilesims/layer0/api/backend/ecs/id"
	models "github.com/quintilesims/layer0/common/models"
)

// MockBackend is a mock of Backend interface
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// CreateEnvironment mocks base method
func (m *MockBackend) CreateEnvironment(environmentName, instanceSize, operatingSystem, amiID string, minClusterCount int, userData []byte) (*models.Environment, error) {
	ret := m.ctrl.Call(m, "CreateEnvironment", environmentName, instanceSize, operatingSystem, amiID, minClusterCount, userData)
	ret0, _ := ret[0].(*models.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnvironment indicates an expected call of CreateEnvironment
func (mr *MockBackendMockRecorder) CreateEnvironment(environmentName, instanceSize, operatingSystem, amiID, minClusterCount, userData interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockBackend)(nil).CreateEnvironment), environmentName, instanceSize, operatingSystem, amiID, minClusterCount, userData)
}

// UpdateEnvironment mocks base method
func (m *MockBackend) UpdateEnvironment(environmentID string, minClusterCount int) (*models.Environment, error) {
	ret := m.ctrl.Call(m, "UpdateEnvironment", environmentID, minClusterCount)
	ret0, _ := ret[0].(*models.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnvironment indicates an expected call of UpdateEnvironment
func (mr *MockBackendMockRecorder) UpdateEnvironment(environmentID, minClusterCount interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironment", reflect.TypeOf((*MockBackend)(nil).UpdateEnvironment), environmentID, minClusterCount)
}

// DeleteEnvironment mocks base method
func (m *MockBackend) DeleteEnvironment(environmentID string) error {
	ret := m.ctrl.Call(m, "DeleteEnvironment", environmentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment
func (mr *MockBackendMockRecorder) DeleteEnvironment(environmentID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockBackend)(nil).DeleteEnvironment), environmentID)
}

// GetEnvironment mocks base method
func (m *MockBackend) GetEnvironment(environmentID string) (*models.Environment, error) {
	ret := m.ctrl.Call(m, "GetEnvironment", environmentID)
	ret0, _ := ret[0].(*models.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockBackendMockRecorder) GetEnvironment(environmentID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockBackend)(nil).GetEnvironment), environmentID)
}

// ListEnvironments mocks base method
func (m *MockBackend) ListEnvironments() ([]id.ECSEnvironmentID, error) {
	ret := m.ctrl.Call(m, "ListEnvironments")
	ret0, _ := ret[0].([]id.ECSEnvironmentID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnvironments indicates an expected call of ListEnvironments
func (mr *MockBackendMockRecorder) ListEnvironments() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockBackend)(nil).ListEnvironments))
}

// CreateEnvironmentLink mocks base method
func (m *MockBackend) CreateEnvironmentLink(sourceEnvironmentID, destEnvironmentID string) error {
	ret := m.ctrl.Call(m, "CreateEnvironmentLink", sourceEnvironmentID, destEnvironmentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEnvironmentLink indicates an expected call of CreateEnvironmentLink
func (mr *MockBackendMockRecorder) CreateEnvironmentLink(sourceEnvironmentID, destEnvironmentID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentLink", reflect.TypeOf((*MockBackend)(nil).CreateEnvironmentLink), sourceEnvironmentID, destEnvironmentID)
}

// DeleteEnvironmentLink mocks base method
func (m *MockBackend) DeleteEnvironmentLink(sourceEnvironmentID, destEnvironmentID string) error {
	ret := m.ctrl.Call(m, "DeleteEnvironmentLink", sourceEnvironmentID, destEnvironmentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEnvironmentLink indicates an expected call of DeleteEnvironmentLink
func (mr *MockBackendMockRecorder) DeleteEnvironmentLink(sourceEnvironmentID, destEnvironmentID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentLink", reflect.TypeOf((*MockBackend)(nil).DeleteEnvironmentLink), sourceEnvironmentID, destEnvironmentID)
}

// ListDeploys mocks base method
func (m *MockBackend) ListDeploys() ([]*models.Deploy, error) {
	ret := m.ctrl.Call(m, "ListDeploys")
	ret0, _ := ret[0].([]*models.Deploy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploys indicates an expected call of ListDeploys
func (mr *MockBackendMockRecorder) ListDeploys() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploys", reflect.TypeOf((*MockBackend)(nil).ListDeploys))
}

// GetDeploy mocks base method
func (m *MockBackend) GetDeploy(deployID string) (*models.Deploy, error) {
	ret := m.ctrl.Call(m, "GetDeploy", deployID)
	ret0, _ := ret[0].(*models.Deploy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploy indicates an expected call of GetDeploy
func (mr *MockBackendMockRecorder) GetDeploy(deployID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploy", reflect.TypeOf((*MockBackend)(nil).GetDeploy), deployID)
}

// CreateDeploy mocks base method
func (m *MockBackend) CreateDeploy(name string, body []byte) (*models.Deploy, error) {
	ret := m.ctrl.Call(m, "CreateDeploy", name, body)
	ret0, _ := ret[0].(*models.Deploy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeploy indicates an expected call of CreateDeploy
func (mr *MockBackendMockRecorder) CreateDeploy(name, body interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploy", reflect.TypeOf((*MockBackend)(nil).CreateDeploy), name, body)
}

// DeleteDeploy mocks base method
func (m *MockBackend) DeleteDeploy(deployID string) error {
	ret := m.ctrl.Call(m, "DeleteDeploy", deployID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDeploy indicates an expected call of DeleteDeploy
func (mr *MockBackendMockRecorder) DeleteDeploy(deployID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDeploy", reflect.TypeOf((*MockBackend)(nil).DeleteDeploy), deployID)
}

// ListServices mocks base method
func (m *MockBackend) ListServices() ([]*models.Service, error) {
	ret := m.ctrl.Call(m, "ListServices")
	ret0, _ := ret[0].([]*models.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices
func (mr *MockBackendMockRecorder) ListServices() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockBackend)(nil).ListServices))
}

// ListServiceNames mocks base method
func (m *MockBackend) ListServiceNames() ([]id.L0ServiceID, error) {
	ret := m.ctrl.Call(m, "ListServiceNames")
	ret0, _ := ret[0].([]id.L0ServiceID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceNames indicates an expected call of ListServiceNames
func (mr *MockBackendMockRecorder) ListServiceNames() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceNames", reflect.TypeOf((*MockBackend)(nil).ListServiceNames))
}

// GetService mocks base method
func (m *MockBackend) GetService(envID, serviceID string) (*models.Service, error) {
	ret := m.ctrl.Call(m, "GetService", envID, serviceID)
	ret0, _ := ret[0].(*models.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService
func (mr *MockBackendMockRecorder) GetService(envID, serviceID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockBackend)(nil).GetService), envID, serviceID)
}

// CreateService mocks base method
func (m *MockBackend) CreateService(serviceName, environmentID, deployID, loadBalancerID string) (*models.Service, error) {
	ret := m.ctrl.Call(m, "CreateService", serviceName, environmentID, deployID, loadBalancerID)
	ret0, _ := ret[0].(*models.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateService indicates an expected call of CreateService
func (mr *MockBackendMockRecorder) CreateService(serviceName, environmentID, deployID, loadBalancerID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockBackend)(nil).CreateService), serviceName, environmentID, deployID, loadBalancerID)
}

// DeleteService mocks base method
func (m *MockBackend) DeleteService(environmentID, serviceID string) error {
	ret := m.ctrl.Call(m, "DeleteService", environmentID, serviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteService indicates an expected call of DeleteService
func (mr *MockBackendMockRecorder) DeleteService(environmentID, serviceID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockBackend)(nil).DeleteService), environmentID, serviceID)
}

// ScaleService mocks base method
func (m *MockBackend) ScaleService(environmentID, serviceID string, count int) (*models.Service, error) {
	ret := m.ctrl.Call(m, "ScaleService", environmentID, serviceID, count)
	ret0, _ := ret[0].(*models.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScaleService indicates an expected call of ScaleService
func (mr *MockBackendMockRecorder) ScaleService(environmentID, serviceID, count interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleService", reflect.TypeOf((*MockBackend)(nil).ScaleService), environmentID, serviceID, count)
}

// UpdateService mocks base method
func (m *MockBackend) UpdateService(environmentID, serviceID, deployID string) (*models.Service, error) {
	ret := m.ctrl.Call(m, "UpdateService", environmentID, serviceID, deployID)
	ret0, _ := ret[0].(*models.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateService indicates an expected call of UpdateService
func (mr *MockBackendMockRecorder) UpdateService(environmentID, serviceID, deployID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockBackend)(nil).UpdateService), environmentID, serviceID, deployID)
}

// GetServiceLogs mocks base method
func (m *MockBackend) GetServiceLogs(environmentID, serviceID, start, end string, tail int) ([]*models.LogFile, error) {
	ret := m.ctrl.Call(m, "GetServiceLogs", environmentID, serviceID, start, end, tail)
	ret0, _ := ret[0].([]*models.LogFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceLogs indicates an expected call of GetServiceLogs
func (mr *MockBackendMockRecorder) GetServiceLogs(environmentID, serviceID, start, end, tail interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceLogs", reflect.TypeOf((*MockBackend)(nil).GetServiceLogs), environmentID, serviceID, start, end, tail)
}

// CreateTask mocks base method
func (m *MockBackend) CreateTask(envID, taskName, deployVersion string, overrides []models.ContainerOverride) (*models.Task, error) {
	ret := m.ctrl.Call(m, "CreateTask", envID, taskName, deployVersion, overrides)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask
func (mr *MockBackendMockRecorder) CreateTask(envID, taskName, deployVersion, overrides interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockBackend)(nil).CreateTask), envID, taskName, deployVersion, overrides)
}

// ListTasks mocks base method
func (m *MockBackend) ListTasks() ([]string, error) {
	ret := m.ctrl.Call(m, "ListTasks")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasks indicates an expected call of ListTasks
func (mr *MockBackendMockRecorder) ListTasks() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*MockBackend)(nil).ListTasks))
}

// GetTask mocks base method
func (m *MockBackend) GetTask(envID, taskID string) (*models.Task, error) {
	ret := m.ctrl.Call(m, "GetTask", envID, taskID)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask
func (mr *MockBackendMockRecorder) GetTask(envID, taskID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockBackend)(nil).GetTask), envID, taskID)
}

// DeleteTask mocks base method
func (m *MockBackend) DeleteTask(envID, taskID string) error {
	ret := m.ctrl.Call(m, "DeleteTask", envID, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask
func (mr *MockBackendMockRecorder) DeleteTask(envID, taskID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockBackend)(nil).DeleteTask), envID, taskID)
}

// GetTaskLogs mocks base method
func (m *MockBackend) GetTaskLogs(environmentID, taskID, start, end string, tail int) ([]*models.LogFile, error) {
	ret := m.ctrl.Call(m, "GetTaskLogs", environmentID, taskID, start, end, tail)
	ret0, _ := ret[0].([]*models.LogFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskLogs indicates an expected call of GetTaskLogs
func (mr *MockBackendMockRecorder) GetTaskLogs(environmentID, taskID, start, end, tail interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskLogs", reflect.TypeOf((*MockBackend)(nil).GetTaskLogs), environmentID, taskID, start, end, tail)
}

// ListLoadBalancers mocks base method
func (m *MockBackend) ListLoadBalancers() ([]*models.LoadBalancer, error) {
	ret := m.ctrl.Call(m, "ListLoadBalancers")
	ret0, _ := ret[0].([]*models.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoadBalancers indicates an expected call of ListLoadBalancers
func (mr *MockBackendMockRecorder) ListLoadBalancers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoadBalancers", reflect.TypeOf((*MockBackend)(nil).ListLoadBalancers))
}

// GetLoadBalancer mocks base method
func (m *MockBackend) GetLoadBalancer(id string) (*models.LoadBalancer, error) {
	ret := m.ctrl.Call(m, "GetLoadBalancer", id)
	ret0, _ := ret[0].(*models.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancer indicates an expected call of GetLoadBalancer
func (mr *MockBackendMockRecorder) GetLoadBalancer(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancer", reflect.TypeOf((*MockBackend)(nil).GetLoadBalancer), id)
}

// DeleteLoadBalancer mocks base method
func (m *MockBackend) DeleteLoadBalancer(id string) error {
	ret := m.ctrl.Call(m, "DeleteLoadBalancer", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadBalancer indicates an expected call of DeleteLoadBalancer
func (mr *MockBackendMockRecorder) DeleteLoadBalancer(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancer", reflect.TypeOf((*MockBackend)(nil).DeleteLoadBalancer), id)
}

// CreateLoadBalancer mocks base method
func (m *MockBackend) CreateLoadBalancer(loadBalancerName, environmentID string, isPublic bool, ports []models.Port, healthCheck models.HealthCheck) (*models.LoadBalancer, error) {
	ret := m.ctrl.Call(m, "CreateLoadBalancer", loadBalancerName, environmentID, isPublic, ports, healthCheck)
	ret0, _ := ret[0].(*models.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoadBalancer indicates an expected call of CreateLoadBalancer
func (mr *MockBackendMockRecorder) CreateLoadBalancer(loadBalancerName, environmentID, isPublic, ports, healthCheck interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancer", reflect.TypeOf((*MockBackend)(nil).CreateLoadBalancer), loadBalancerName, environmentID, isPublic, ports, healthCheck)
}

// UpdateLoadBalancerPorts mocks base method
func (m *MockBackend) UpdateLoadBalancerPorts(loadBalancerID string, ports []models.Port) (*models.LoadBalancer, error) {
	ret := m.ctrl.Call(m, "UpdateLoadBalancerPorts", loadBalancerID, ports)
	ret0, _ := ret[0].(*models.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoadBalancerPorts indicates an expected call of UpdateLoadBalancerPorts
func (mr *MockBackendMockRecorder) UpdateLoadBalancerPorts(loadBalancerID, ports interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancerPorts", reflect.TypeOf((*MockBackend)(nil).UpdateLoadBalancerPorts), loadBalancerID, ports)
}

// UpdateLoadBalancerHealthCheck mocks base method
func (m *MockBackend) UpdateLoadBalancerHealthCheck(loadBalancerID string, healthCheck models.HealthCheck) (*models.LoadBalancer, error) {
	ret := m.ctrl.Call(m, "UpdateLoadBalancerHealthCheck", loadBalancerID, healthCheck)
	ret0, _ := ret[0].(*models.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoadBalancerHealthCheck indicates an expected call of UpdateLoadBalancerHealthCheck
func (mr *MockBackendMockRecorder) UpdateLoadBalancerHealthCheck(loadBalancerID, healthCheck interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancerHealthCheck", reflect.TypeOf((*MockBackend)(nil).UpdateLoadBalancerHealthCheck), loadBalancerID, healthCheck)
}
