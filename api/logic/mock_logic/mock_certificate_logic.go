// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/quintilesims/layer0/api/logic (interfaces: CertificateLogic)

package mock_logic

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/quintilesims/layer0/common/models"
)

// Mock of CertificateLogic interface
type MockCertificateLogic struct {
	ctrl     *gomock.Controller
	recorder *_MockCertificateLogicRecorder
}

// Recorder for MockCertificateLogic (not exported)
type _MockCertificateLogicRecorder struct {
	mock *MockCertificateLogic
}

func NewMockCertificateLogic(ctrl *gomock.Controller) *MockCertificateLogic {
	mock := &MockCertificateLogic{ctrl: ctrl}
	mock.recorder = &_MockCertificateLogicRecorder{mock}
	return mock
}

func (_m *MockCertificateLogic) EXPECT() *_MockCertificateLogicRecorder {
	return _m.recorder
}

func (_m *MockCertificateLogic) CreateCertificate(_param0 models.CreateCertificateRequest) (*models.Certificate, error) {
	ret := _m.ctrl.Call(_m, "CreateCertificate", _param0)
	ret0, _ := ret[0].(*models.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCertificateLogicRecorder) CreateCertificate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateCertificate", arg0)
}

func (_m *MockCertificateLogic) DeleteCertificate(_param0 string) error {
	ret := _m.ctrl.Call(_m, "DeleteCertificate", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCertificateLogicRecorder) DeleteCertificate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteCertificate", arg0)
}

func (_m *MockCertificateLogic) GetCertificate(_param0 string) (*models.Certificate, error) {
	ret := _m.ctrl.Call(_m, "GetCertificate", _param0)
	ret0, _ := ret[0].(*models.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCertificateLogicRecorder) GetCertificate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCertificate", arg0)
}

func (_m *MockCertificateLogic) ListCertificates() ([]*models.Certificate, error) {
	ret := _m.ctrl.Call(_m, "ListCertificates")
	ret0, _ := ret[0].([]*models.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCertificateLogicRecorder) ListCertificates() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListCertificates")
}
