// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/quintilesims/layer0/api/scheduler/resource (interfaces: ProviderManager)

package mock_resource

import (
	gomock "github.com/golang/mock/gomock"
	resource "github.com/quintilesims/layer0/api/scheduler/resource"
)

// Mock of ProviderManager interface
type MockProviderManager struct {
	ctrl     *gomock.Controller
	recorder *_MockProviderManagerRecorder
}

// Recorder for MockProviderManager (not exported)
type _MockProviderManagerRecorder struct {
	mock *MockProviderManager
}

func NewMockProviderManager(ctrl *gomock.Controller) *MockProviderManager {
	mock := &MockProviderManager{ctrl: ctrl}
	mock.recorder = &_MockProviderManagerRecorder{mock}
	return mock
}

func (_m *MockProviderManager) EXPECT() *_MockProviderManagerRecorder {
	return _m.recorder
}

func (_m *MockProviderManager) AddNewProvider(_param0 string) (*resource.ResourceProvider, error) {
	ret := _m.ctrl.Call(_m, "AddNewProvider", _param0)
	ret0, _ := ret[0].(*resource.ResourceProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProviderManagerRecorder) AddNewProvider(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddNewProvider", arg0)
}

func (_m *MockProviderManager) GetProviders(_param0 string) ([]*resource.ResourceProvider, error) {
	ret := _m.ctrl.Call(_m, "GetProviders", _param0)
	ret0, _ := ret[0].([]*resource.ResourceProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProviderManagerRecorder) GetProviders(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetProviders", arg0)
}

func (_m *MockProviderManager) ScaleTo(_param0 string, _param1 int, _param2 []*resource.ResourceProvider) (int, error) {
	ret := _m.ctrl.Call(_m, "ScaleTo", _param0, _param1, _param2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockProviderManagerRecorder) ScaleTo(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ScaleTo", arg0, arg1, arg2)
}
